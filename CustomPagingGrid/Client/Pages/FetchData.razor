@page "/fetchdata"
@using CustomPagingGrid.Shared
@inject ServerService server

<PageTitle>Dynamic Grid</PageTitle>

<h1>Dynamic Grid</h1>
<div class="pb-4">
    <button class="btn btn-warning" @onclick="(()=>FetchOldData())">Display old data</button>
    <button class="btn btn-primary" @onclick="(()=>FetchDifferentData())">Display new Data</button>
</div>
@*<table class="table">
    <thead>
    <tr>
    @foreach (var p in GetValues.First().GetType().GetProperties())
    {
    <th>@p.Name</th>
    }
    </tr>
    </thead>
    <tbody>
    @foreach (var item in GetValues)
    {
    <tr>
    @foreach (var p in item.GetType().GetProperties())
    {
    <td>@p.GetValue(item)</td>
    }
    </tr>
    }
    </tbody>
    </table>*@

<b />
<b />
@if (GetValues.Any())
{

    <TelerikGrid Data="GetValues" Sortable=true Pageable=true FilterMode="@Telerik.Blazor.GridFilterMode.FilterMenu">
        <GridColumns>
            @foreach (var p in GetValues.First().GetType().GetProperties())
        {
            <GridColumn Field="@p.Name" Title="@p.Name" FieldType="p.PropertyType" />
        }
    </GridColumns>
</TelerikGrid>
}
@code {
    List<Object> GetValues = new List<Object>();

    protected override async Task OnInitializedAsync()
    {
        var data = await server.GetDataAsync(10, 1);
        if (data is not null)
        {
            GetValues.AddRange(data.Value);
        }
    }

    public async Task FetchDifferentData()
    {
        var response = await server.GetProductsAsync();
        GetValues.Clear();//empty the list first
        GetValues = new List<object>(response);
    }

    public async Task FetchOldData()
    {
        var data = await server.GetDataAsync(10, 1);
        if (data is not null)
        {
            GetValues.Clear();//empty the list first
            GetValues = new List<object>(data.Value);
        }
    }
}
